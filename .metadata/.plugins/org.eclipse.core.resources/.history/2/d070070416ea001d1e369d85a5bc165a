package com.ict.edu2;

public class Ex02_String {

	public static void main(String[] args) {
		/* String 클래스 : 문자열을 처리하는 클래스
		* 기본자료형은 아니지만 기본 자료형 처럼 사용

		String에서 자주 사용되는 메소드
		 메소드(인자) : 실행결과의 자료형 
		 인자 : 메소드를 실행하기 위해서 받은 재료, 소스
		 
		1. charAt(int index) : char
		   위치정보 = index
		   위치 정보를 받아서 해당 위치의 존재하는 글자를 char형으로 반환
		*/
		String str = "한국 ICT 인재개발원 1강의장";
		char k1 = str.charAt(7);
		System.out.println("결과 : " + k1);
		
		str = "대한민국 I Love You 123";
		// 모두 대문자로 만들자 (대문자는 그대로, 소문자는 -32 해서 대문자로)
		// str.length() => str의 문자열의 길이를 구해준다.
		for(int i = 0; i < str.length(); i++) {
			char k2 = str.charAt(i);
			if (k2 >= 'a' && k2 <= 'z') {
				System.out.print((char)(k2 - 32));
			}else {
				System.out.print(k2);
			}
		}
		System.out.println();
		System.out.println("================");
		
		/*
		2. concat(String str) : String
		   입력된 문자열을 현재 문자열과 합친다. ("문자열" + "문자열")
		 */
		String s1 = "대한민국";
		String s2 = "KOREA";
		String s3 = s1.concat(s2);
		System.out.println(s3);
		System.out.println(s1 + s2);
		System.out.println("================");
		
		/*
		3. contains(CharSequence s) : boolean
			CharSequence = String 비슷, char 값을 읽을수 있는 시퀀스, 인터페이스
			현재 가지고 있는 문자열 중에 인자로 들어온 문자나 문자열을 가지고 있으면
			true, 없으면 false
		 */
		String s4 = "KOREA @ 대한민국";
		System.out.println(s4.contains("@"));
		System.out.println(s4.contains("REA"));
		System.out.println(s4.contains("rea"));
		System.out.println("================");
		
		/*
		4. equals(Object anObject) : boolean
			입력된 문자열과 현재 문자열이 같으면 true, 다르면 false (대소문자를 구별)
		5. equalsIgnoreCase(String anotherString) : boolean
		 	입력된 문자열과 현재 문자열이 같으면 true, 다르면 false (대소문자를 구별하지 않음)*/
		String s5 = "Korea";
		String s6 = "KOREA";
		System.out.println(s5.equals(s6));
		System.out.println(s5.equalsIgnoreCase(s6));
		System.out.println("================");
		
		/*
		6. format(String format, Object...args) : static String
			형식을 지정하고 형식에 맞춰 생성한다.
		 */
		String s7 = "ICT 인재 개발원";
		// 문자열 => %s
		String s8 = String.format("%s", s7);
		System.out.println(s8);
		
		//%30s 30자리 차지하는 문자열 (남은 자리는 비워둔다.) 오른쪽 정렬
		s8 = String.format("%30s", s7);
		System.out.println(s8);
			
		//%30s 30자리 차지하는 문자열 (남은 자리는 비워둔다.) 왼쪽 정렬
		s8 = String.format("%-30s", s7);
		System.out.println(s8);
		
		//자리가 모자르면 알아서 다 나옴
		s8 = String.format("%4s", s7);
		System.out.println(s8);
		
		//자리가 모자르면 짤린다.
		s8 = String.format("%.7s", s7);
		System.out.println(s8);
		System.out.println("================");
		
		//%d를 사용하면 정수 형식 지정
		int s9 =23142312;
		s8 = String.format("%d**", s9);
		System.out.println(s8);
		
		//오른쪽 정렬
		s8 = String.format("%5d", s9);
		System.out.println(s8);
		
		//오른쪽 정렬 (빈 공간 0으로 채운다.)
		s8 = String.format("%05d", s9);
		System.out.println(s8);
		
		//오른쪽 정렬 (세자리마다 콤마)
		s8 = String.format("%,d", s9);
		System.out.println(s8);
		
		//왼쪽 정렬
		s8 = String.format("%-5d", s9);
		System.out.println(s8);
		System.out.println("================");
		
		//%f => 실수형식
		double s10 = 1245.44547954;
		System.out.println(String.format("%f", s10));
		System.out.println(String.format("%20f", s10));
		System.out.println(String.format("%.3f", s10));
		System.out.println(String.format("%.1f", s10));
		System.out.println(String.format("%,.1f", s10));
		System.out.println(String.format("%.1f", s10));
		System.out.println("================");
		
		/*
		7. getBytes() : byte[]
			해당 문자열을 byte[]로 변환시킨다.
			보통 입출력할때 사용한다. (대/소문자, 숫자, 일부특수문자만 가능(아스키코드), 영어를 제외한 글자 안됨)
		 */
		String a1 = "java";
		byte[] b1 = a1.getBytes();
		System.out.println(b1[0]); // j숫자
		System.out.println(b1[1]); // a숫자
		System.out.println(b1[2]); // v숫자
		System.out.println(b1[3]); // a숫자
		System.out.println("================");
		
		for (int i = 0; i < 4; i++) {
			System.out.println((char)(b1[i]));
		}
	}

}
